// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/define.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_src_2fdefine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_src_2fdefine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_src_2fdefine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_src_2fdefine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_src_2fdefine_2eproto;
namespace define {
class HardwareInfo;
struct HardwareInfoDefaultTypeInternal;
extern HardwareInfoDefaultTypeInternal _HardwareInfo_default_instance_;
class HardwareOther;
struct HardwareOtherDefaultTypeInternal;
extern HardwareOtherDefaultTypeInternal _HardwareOther_default_instance_;
class Obj;
struct ObjDefaultTypeInternal;
extern ObjDefaultTypeInternal _Obj_default_instance_;
class PostDomain;
struct PostDomainDefaultTypeInternal;
extern PostDomainDefaultTypeInternal _PostDomain_default_instance_;
class PostInterface;
struct PostInterfaceDefaultTypeInternal;
extern PostInterfaceDefaultTypeInternal _PostInterface_default_instance_;
class PostSimpleData;
struct PostSimpleDataDefaultTypeInternal;
extern PostSimpleDataDefaultTypeInternal _PostSimpleData_default_instance_;
class RcvData;
struct RcvDataDefaultTypeInternal;
extern RcvDataDefaultTypeInternal _RcvData_default_instance_;
class RcvUni;
struct RcvUniDefaultTypeInternal;
extern RcvUniDefaultTypeInternal _RcvUni_default_instance_;
class ResponseRcv;
struct ResponseRcvDefaultTypeInternal;
extern ResponseRcvDefaultTypeInternal _ResponseRcv_default_instance_;
class RsaKey;
struct RsaKeyDefaultTypeInternal;
extern RsaKeyDefaultTypeInternal _RsaKey_default_instance_;
class SysCfg;
struct SysCfgDefaultTypeInternal;
extern SysCfgDefaultTypeInternal _SysCfg_default_instance_;
}  // namespace define
PROTOBUF_NAMESPACE_OPEN
template<> ::define::HardwareInfo* Arena::CreateMaybeMessage<::define::HardwareInfo>(Arena*);
template<> ::define::HardwareOther* Arena::CreateMaybeMessage<::define::HardwareOther>(Arena*);
template<> ::define::Obj* Arena::CreateMaybeMessage<::define::Obj>(Arena*);
template<> ::define::PostDomain* Arena::CreateMaybeMessage<::define::PostDomain>(Arena*);
template<> ::define::PostInterface* Arena::CreateMaybeMessage<::define::PostInterface>(Arena*);
template<> ::define::PostSimpleData* Arena::CreateMaybeMessage<::define::PostSimpleData>(Arena*);
template<> ::define::RcvData* Arena::CreateMaybeMessage<::define::RcvData>(Arena*);
template<> ::define::RcvUni* Arena::CreateMaybeMessage<::define::RcvUni>(Arena*);
template<> ::define::ResponseRcv* Arena::CreateMaybeMessage<::define::ResponseRcv>(Arena*);
template<> ::define::RsaKey* Arena::CreateMaybeMessage<::define::RsaKey>(Arena*);
template<> ::define::SysCfg* Arena::CreateMaybeMessage<::define::SysCfg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace define {

// ===================================================================

class Obj final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:define.Obj) */ {
 public:
  inline Obj() : Obj(nullptr) {}
  ~Obj() override;
  explicit constexpr Obj(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Obj(const Obj& from);
  Obj(Obj&& from) noexcept
    : Obj() {
    *this = ::std::move(from);
  }

  inline Obj& operator=(const Obj& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obj& operator=(Obj&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Obj& default_instance() {
    return *internal_default_instance();
  }
  static inline const Obj* internal_default_instance() {
    return reinterpret_cast<const Obj*>(
               &_Obj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Obj& a, Obj& b) {
    a.Swap(&b);
  }
  inline void Swap(Obj* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Obj* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Obj* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Obj>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Obj& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Obj& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obj* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "define.Obj";
  }
  protected:
  explicit Obj(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string model = 1;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:define.Obj)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fdefine_2eproto;
};
// -------------------------------------------------------------------

class HardwareOther final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:define.HardwareOther) */ {
 public:
  inline HardwareOther() : HardwareOther(nullptr) {}
  ~HardwareOther() override;
  explicit constexpr HardwareOther(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HardwareOther(const HardwareOther& from);
  HardwareOther(HardwareOther&& from) noexcept
    : HardwareOther() {
    *this = ::std::move(from);
  }

  inline HardwareOther& operator=(const HardwareOther& from) {
    CopyFrom(from);
    return *this;
  }
  inline HardwareOther& operator=(HardwareOther&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HardwareOther& default_instance() {
    return *internal_default_instance();
  }
  static inline const HardwareOther* internal_default_instance() {
    return reinterpret_cast<const HardwareOther*>(
               &_HardwareOther_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HardwareOther& a, HardwareOther& b) {
    a.Swap(&b);
  }
  inline void Swap(HardwareOther* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HardwareOther* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HardwareOther* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HardwareOther>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HardwareOther& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HardwareOther& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HardwareOther* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "define.HardwareOther";
  }
  protected:
  explicit HardwareOther(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineFieldNumber = 1,
    kAptFieldNumber = 2,
    kActiveFieldNumber = 3,
  };
  // string machine = 1;
  void clear_machine();
  const std::string& machine() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_machine(ArgT0&& arg0, ArgT... args);
  std::string* mutable_machine();
  PROTOBUF_NODISCARD std::string* release_machine();
  void set_allocated_machine(std::string* machine);
  private:
  const std::string& _internal_machine() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_machine(const std::string& value);
  std::string* _internal_mutable_machine();
  public:

  // string apt = 2;
  void clear_apt();
  const std::string& apt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apt();
  PROTOBUF_NODISCARD std::string* release_apt();
  void set_allocated_apt(std::string* apt);
  private:
  const std::string& _internal_apt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apt(const std::string& value);
  std::string* _internal_mutable_apt();
  public:

  // string active = 3;
  void clear_active();
  const std::string& active() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_active(ArgT0&& arg0, ArgT... args);
  std::string* mutable_active();
  PROTOBUF_NODISCARD std::string* release_active();
  void set_allocated_active(std::string* active);
  private:
  const std::string& _internal_active() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_active(const std::string& value);
  std::string* _internal_mutable_active();
  public:

  // @@protoc_insertion_point(class_scope:define.HardwareOther)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fdefine_2eproto;
};
// -------------------------------------------------------------------

class HardwareInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:define.HardwareInfo) */ {
 public:
  inline HardwareInfo() : HardwareInfo(nullptr) {}
  ~HardwareInfo() override;
  explicit constexpr HardwareInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HardwareInfo(const HardwareInfo& from);
  HardwareInfo(HardwareInfo&& from) noexcept
    : HardwareInfo() {
    *this = ::std::move(from);
  }

  inline HardwareInfo& operator=(const HardwareInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HardwareInfo& operator=(HardwareInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HardwareInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const HardwareInfo* internal_default_instance() {
    return reinterpret_cast<const HardwareInfo*>(
               &_HardwareInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HardwareInfo& a, HardwareInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(HardwareInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HardwareInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HardwareInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HardwareInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HardwareInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HardwareInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HardwareInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "define.HardwareInfo";
  }
  protected:
  explicit HardwareInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuFieldNumber = 5,
    kBoardFieldNumber = 6,
    kGpuFieldNumber = 7,
    kMemoryFieldNumber = 8,
    kDiskFieldNumber = 9,
    kNetcardFieldNumber = 10,
    kOsTypeFieldNumber = 2,
    kVersionFieldNumber = 3,
    kUniIdFieldNumber = 4,
    kOtherFieldNumber = 11,
    kTidFieldNumber = 1,
  };
  // repeated .define.Obj cpu = 5;
  int cpu_size() const;
  private:
  int _internal_cpu_size() const;
  public:
  void clear_cpu();
  ::define::Obj* mutable_cpu(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >*
      mutable_cpu();
  private:
  const ::define::Obj& _internal_cpu(int index) const;
  ::define::Obj* _internal_add_cpu();
  public:
  const ::define::Obj& cpu(int index) const;
  ::define::Obj* add_cpu();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >&
      cpu() const;

  // repeated .define.Obj board = 6;
  int board_size() const;
  private:
  int _internal_board_size() const;
  public:
  void clear_board();
  ::define::Obj* mutable_board(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >*
      mutable_board();
  private:
  const ::define::Obj& _internal_board(int index) const;
  ::define::Obj* _internal_add_board();
  public:
  const ::define::Obj& board(int index) const;
  ::define::Obj* add_board();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >&
      board() const;

  // repeated .define.Obj gpu = 7;
  int gpu_size() const;
  private:
  int _internal_gpu_size() const;
  public:
  void clear_gpu();
  ::define::Obj* mutable_gpu(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >*
      mutable_gpu();
  private:
  const ::define::Obj& _internal_gpu(int index) const;
  ::define::Obj* _internal_add_gpu();
  public:
  const ::define::Obj& gpu(int index) const;
  ::define::Obj* add_gpu();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >&
      gpu() const;

  // repeated .define.Obj memory = 8;
  int memory_size() const;
  private:
  int _internal_memory_size() const;
  public:
  void clear_memory();
  ::define::Obj* mutable_memory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >*
      mutable_memory();
  private:
  const ::define::Obj& _internal_memory(int index) const;
  ::define::Obj* _internal_add_memory();
  public:
  const ::define::Obj& memory(int index) const;
  ::define::Obj* add_memory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >&
      memory() const;

  // repeated .define.Obj disk = 9;
  int disk_size() const;
  private:
  int _internal_disk_size() const;
  public:
  void clear_disk();
  ::define::Obj* mutable_disk(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >*
      mutable_disk();
  private:
  const ::define::Obj& _internal_disk(int index) const;
  ::define::Obj* _internal_add_disk();
  public:
  const ::define::Obj& disk(int index) const;
  ::define::Obj* add_disk();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >&
      disk() const;

  // repeated .define.Obj netcard = 10;
  int netcard_size() const;
  private:
  int _internal_netcard_size() const;
  public:
  void clear_netcard();
  ::define::Obj* mutable_netcard(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >*
      mutable_netcard();
  private:
  const ::define::Obj& _internal_netcard(int index) const;
  ::define::Obj* _internal_add_netcard();
  public:
  const ::define::Obj& netcard(int index) const;
  ::define::Obj* add_netcard();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >&
      netcard() const;

  // string os_type = 2;
  void clear_os_type();
  const std::string& os_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_os_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_os_type();
  PROTOBUF_NODISCARD std::string* release_os_type();
  void set_allocated_os_type(std::string* os_type);
  private:
  const std::string& _internal_os_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_os_type(const std::string& value);
  std::string* _internal_mutable_os_type();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string uni_id = 4;
  void clear_uni_id();
  const std::string& uni_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uni_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uni_id();
  PROTOBUF_NODISCARD std::string* release_uni_id();
  void set_allocated_uni_id(std::string* uni_id);
  private:
  const std::string& _internal_uni_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uni_id(const std::string& value);
  std::string* _internal_mutable_uni_id();
  public:

  // .define.HardwareOther other = 11;
  bool has_other() const;
  private:
  bool _internal_has_other() const;
  public:
  void clear_other();
  const ::define::HardwareOther& other() const;
  PROTOBUF_NODISCARD ::define::HardwareOther* release_other();
  ::define::HardwareOther* mutable_other();
  void set_allocated_other(::define::HardwareOther* other);
  private:
  const ::define::HardwareOther& _internal_other() const;
  ::define::HardwareOther* _internal_mutable_other();
  public:
  void unsafe_arena_set_allocated_other(
      ::define::HardwareOther* other);
  ::define::HardwareOther* unsafe_arena_release_other();

  // int32 tid = 1;
  void clear_tid();
  int32_t tid() const;
  void set_tid(int32_t value);
  private:
  int32_t _internal_tid() const;
  void _internal_set_tid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:define.HardwareInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj > cpu_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj > board_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj > gpu_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj > memory_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj > disk_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj > netcard_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uni_id_;
  ::define::HardwareOther* other_;
  int32_t tid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fdefine_2eproto;
};
// -------------------------------------------------------------------

class PostDomain final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:define.PostDomain) */ {
 public:
  inline PostDomain() : PostDomain(nullptr) {}
  ~PostDomain() override;
  explicit constexpr PostDomain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostDomain(const PostDomain& from);
  PostDomain(PostDomain&& from) noexcept
    : PostDomain() {
    *this = ::std::move(from);
  }

  inline PostDomain& operator=(const PostDomain& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostDomain& operator=(PostDomain&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostDomain& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostDomain* internal_default_instance() {
    return reinterpret_cast<const PostDomain*>(
               &_PostDomain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PostDomain& a, PostDomain& b) {
    a.Swap(&b);
  }
  inline void Swap(PostDomain* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostDomain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostDomain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostDomain>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostDomain& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostDomain& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostDomain* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "define.PostDomain";
  }
  protected:
  explicit PostDomain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlPathFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // string url_path = 1;
  void clear_url_path();
  const std::string& url_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_path();
  PROTOBUF_NODISCARD std::string* release_url_path();
  void set_allocated_url_path(std::string* url_path);
  private:
  const std::string& _internal_url_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url_path(const std::string& value);
  std::string* _internal_mutable_url_path();
  public:

  // uint64 time = 2;
  void clear_time();
  uint64_t time() const;
  void set_time(uint64_t value);
  private:
  uint64_t _internal_time() const;
  void _internal_set_time(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:define.PostDomain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_path_;
  uint64_t time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fdefine_2eproto;
};
// -------------------------------------------------------------------

class PostInterface final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:define.PostInterface) */ {
 public:
  inline PostInterface() : PostInterface(nullptr) {}
  ~PostInterface() override;
  explicit constexpr PostInterface(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostInterface(const PostInterface& from);
  PostInterface(PostInterface&& from) noexcept
    : PostInterface() {
    *this = ::std::move(from);
  }

  inline PostInterface& operator=(const PostInterface& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostInterface& operator=(PostInterface&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostInterface& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostInterface* internal_default_instance() {
    return reinterpret_cast<const PostInterface*>(
               &_PostInterface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PostInterface& a, PostInterface& b) {
    a.Swap(&b);
  }
  inline void Swap(PostInterface* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostInterface* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostInterface* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostInterface>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostInterface& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostInterface& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostInterface* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "define.PostInterface";
  }
  protected:
  explicit PostInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainsFieldNumber = 1,
    kAidFieldNumber = 2,
    kBaseFieldNumber = 3,
    kInfoFieldNumber = 4,
    kOrderFieldNumber = 5,
    kAptFieldNumber = 6,
    kUseFieldNumber = 7,
    kUpdateFieldNumber = 8,
    kUpdateDomainFieldNumber = 9,
    kUpdatePathFieldNumber = 10,
    kGeneralFieldNumber = 11,
    kPostTypeFieldNumber = 12,
    kUniIdFieldNumber = 13,
  };
  // repeated .define.PostDomain domains = 1;
  int domains_size() const;
  private:
  int _internal_domains_size() const;
  public:
  void clear_domains();
  ::define::PostDomain* mutable_domains(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::PostDomain >*
      mutable_domains();
  private:
  const ::define::PostDomain& _internal_domains(int index) const;
  ::define::PostDomain* _internal_add_domains();
  public:
  const ::define::PostDomain& domains(int index) const;
  ::define::PostDomain* add_domains();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::PostDomain >&
      domains() const;

  // string aid = 2;
  void clear_aid();
  const std::string& aid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_aid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_aid();
  PROTOBUF_NODISCARD std::string* release_aid();
  void set_allocated_aid(std::string* aid);
  private:
  const std::string& _internal_aid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aid(const std::string& value);
  std::string* _internal_mutable_aid();
  public:

  // string base = 3;
  void clear_base();
  const std::string& base() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_base(ArgT0&& arg0, ArgT... args);
  std::string* mutable_base();
  PROTOBUF_NODISCARD std::string* release_base();
  void set_allocated_base(std::string* base);
  private:
  const std::string& _internal_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base(const std::string& value);
  std::string* _internal_mutable_base();
  public:

  // string info = 4;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // string order = 5;
  void clear_order();
  const std::string& order() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order();
  PROTOBUF_NODISCARD std::string* release_order();
  void set_allocated_order(std::string* order);
  private:
  const std::string& _internal_order() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order(const std::string& value);
  std::string* _internal_mutable_order();
  public:

  // string apt = 6;
  void clear_apt();
  const std::string& apt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apt();
  PROTOBUF_NODISCARD std::string* release_apt();
  void set_allocated_apt(std::string* apt);
  private:
  const std::string& _internal_apt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apt(const std::string& value);
  std::string* _internal_mutable_apt();
  public:

  // string use = 7;
  void clear_use();
  const std::string& use() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_use(ArgT0&& arg0, ArgT... args);
  std::string* mutable_use();
  PROTOBUF_NODISCARD std::string* release_use();
  void set_allocated_use(std::string* use);
  private:
  const std::string& _internal_use() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_use(const std::string& value);
  std::string* _internal_mutable_use();
  public:

  // string update = 8;
  void clear_update();
  const std::string& update() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update();
  PROTOBUF_NODISCARD std::string* release_update();
  void set_allocated_update(std::string* update);
  private:
  const std::string& _internal_update() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update(const std::string& value);
  std::string* _internal_mutable_update();
  public:

  // string update_domain = 9;
  void clear_update_domain();
  const std::string& update_domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_domain();
  PROTOBUF_NODISCARD std::string* release_update_domain();
  void set_allocated_update_domain(std::string* update_domain);
  private:
  const std::string& _internal_update_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_domain(const std::string& value);
  std::string* _internal_mutable_update_domain();
  public:

  // string update_path = 10;
  void clear_update_path();
  const std::string& update_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_path();
  PROTOBUF_NODISCARD std::string* release_update_path();
  void set_allocated_update_path(std::string* update_path);
  private:
  const std::string& _internal_update_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_path(const std::string& value);
  std::string* _internal_mutable_update_path();
  public:

  // string general = 11;
  void clear_general();
  const std::string& general() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_general(ArgT0&& arg0, ArgT... args);
  std::string* mutable_general();
  PROTOBUF_NODISCARD std::string* release_general();
  void set_allocated_general(std::string* general);
  private:
  const std::string& _internal_general() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_general(const std::string& value);
  std::string* _internal_mutable_general();
  public:

  // string post_type = 12;
  void clear_post_type();
  const std::string& post_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_post_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_post_type();
  PROTOBUF_NODISCARD std::string* release_post_type();
  void set_allocated_post_type(std::string* post_type);
  private:
  const std::string& _internal_post_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_post_type(const std::string& value);
  std::string* _internal_mutable_post_type();
  public:

  // string uni_id = 13;
  void clear_uni_id();
  const std::string& uni_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uni_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uni_id();
  PROTOBUF_NODISCARD std::string* release_uni_id();
  void set_allocated_uni_id(std::string* uni_id);
  private:
  const std::string& _internal_uni_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uni_id(const std::string& value);
  std::string* _internal_mutable_uni_id();
  public:

  // @@protoc_insertion_point(class_scope:define.PostInterface)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::PostDomain > domains_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr use_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr general_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uni_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fdefine_2eproto;
};
// -------------------------------------------------------------------

class SysCfg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:define.SysCfg) */ {
 public:
  inline SysCfg() : SysCfg(nullptr) {}
  ~SysCfg() override;
  explicit constexpr SysCfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SysCfg(const SysCfg& from);
  SysCfg(SysCfg&& from) noexcept
    : SysCfg() {
    *this = ::std::move(from);
  }

  inline SysCfg& operator=(const SysCfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysCfg& operator=(SysCfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SysCfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SysCfg* internal_default_instance() {
    return reinterpret_cast<const SysCfg*>(
               &_SysCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SysCfg& a, SysCfg& b) {
    a.Swap(&b);
  }
  inline void Swap(SysCfg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SysCfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SysCfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SysCfg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SysCfg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SysCfg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SysCfg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "define.SysCfg";
  }
  protected:
  explicit SysCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAptFieldNumber = 3,
    kDevelopFieldNumber = 1,
    kUserExpFieldNumber = 2,
  };
  // uint64 apt = 3;
  void clear_apt();
  uint64_t apt() const;
  void set_apt(uint64_t value);
  private:
  uint64_t _internal_apt() const;
  void _internal_set_apt(uint64_t value);
  public:

  // bool develop = 1;
  void clear_develop();
  bool develop() const;
  void set_develop(bool value);
  private:
  bool _internal_develop() const;
  void _internal_set_develop(bool value);
  public:

  // bool user_exp = 2;
  void clear_user_exp();
  bool user_exp() const;
  void set_user_exp(bool value);
  private:
  bool _internal_user_exp() const;
  void _internal_set_user_exp(bool value);
  public:

  // @@protoc_insertion_point(class_scope:define.SysCfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t apt_;
  bool develop_;
  bool user_exp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fdefine_2eproto;
};
// -------------------------------------------------------------------

class RsaKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:define.RsaKey) */ {
 public:
  inline RsaKey() : RsaKey(nullptr) {}
  ~RsaKey() override;
  explicit constexpr RsaKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RsaKey(const RsaKey& from);
  RsaKey(RsaKey&& from) noexcept
    : RsaKey() {
    *this = ::std::move(from);
  }

  inline RsaKey& operator=(const RsaKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline RsaKey& operator=(RsaKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RsaKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const RsaKey* internal_default_instance() {
    return reinterpret_cast<const RsaKey*>(
               &_RsaKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RsaKey& a, RsaKey& b) {
    a.Swap(&b);
  }
  inline void Swap(RsaKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RsaKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RsaKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RsaKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RsaKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RsaKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RsaKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "define.RsaKey";
  }
  protected:
  explicit RsaKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicFieldNumber = 1,
    kPrivateFieldNumber = 2,
  };
  // string public = 1;
  void clear_public_();
  const std::string& public_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_();
  PROTOBUF_NODISCARD std::string* release_public_();
  void set_allocated_public_(std::string* public_);
  private:
  const std::string& _internal_public_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_(const std::string& value);
  std::string* _internal_mutable_public_();
  public:

  // string private = 2;
  void clear_private_();
  const std::string& private_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_();
  PROTOBUF_NODISCARD std::string* release_private_();
  void set_allocated_private_(std::string* private_);
  private:
  const std::string& _internal_private_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_(const std::string& value);
  std::string* _internal_mutable_private_();
  public:

  // @@protoc_insertion_point(class_scope:define.RsaKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fdefine_2eproto;
};
// -------------------------------------------------------------------

class PostSimpleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:define.PostSimpleData) */ {
 public:
  inline PostSimpleData() : PostSimpleData(nullptr) {}
  ~PostSimpleData() override;
  explicit constexpr PostSimpleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostSimpleData(const PostSimpleData& from);
  PostSimpleData(PostSimpleData&& from) noexcept
    : PostSimpleData() {
    *this = ::std::move(from);
  }

  inline PostSimpleData& operator=(const PostSimpleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostSimpleData& operator=(PostSimpleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostSimpleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostSimpleData* internal_default_instance() {
    return reinterpret_cast<const PostSimpleData*>(
               &_PostSimpleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PostSimpleData& a, PostSimpleData& b) {
    a.Swap(&b);
  }
  inline void Swap(PostSimpleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostSimpleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostSimpleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostSimpleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostSimpleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostSimpleData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostSimpleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "define.PostSimpleData";
  }
  protected:
  explicit PostSimpleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kZoneFieldNumber = 2,
    kUnidFieldNumber = 3,
    kRtFieldNumber = 1,
  };
  // repeated string data = 4;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // string zone = 2;
  void clear_zone();
  const std::string& zone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zone();
  PROTOBUF_NODISCARD std::string* release_zone();
  void set_allocated_zone(std::string* zone);
  private:
  const std::string& _internal_zone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zone(const std::string& value);
  std::string* _internal_mutable_zone();
  public:

  // string unid = 3;
  void clear_unid();
  const std::string& unid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unid();
  PROTOBUF_NODISCARD std::string* release_unid();
  void set_allocated_unid(std::string* unid);
  private:
  const std::string& _internal_unid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unid(const std::string& value);
  std::string* _internal_mutable_unid();
  public:

  // int32 rt = 1;
  void clear_rt();
  int32_t rt() const;
  void set_rt(int32_t value);
  private:
  int32_t _internal_rt() const;
  void _internal_set_rt(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:define.PostSimpleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unid_;
  int32_t rt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fdefine_2eproto;
};
// -------------------------------------------------------------------

class RcvData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:define.RcvData) */ {
 public:
  inline RcvData() : RcvData(nullptr) {}
  ~RcvData() override;
  explicit constexpr RcvData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RcvData(const RcvData& from);
  RcvData(RcvData&& from) noexcept
    : RcvData() {
    *this = ::std::move(from);
  }

  inline RcvData& operator=(const RcvData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RcvData& operator=(RcvData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RcvData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RcvData* internal_default_instance() {
    return reinterpret_cast<const RcvData*>(
               &_RcvData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RcvData& a, RcvData& b) {
    a.Swap(&b);
  }
  inline void Swap(RcvData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RcvData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RcvData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RcvData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RcvData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RcvData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RcvData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "define.RcvData";
  }
  protected:
  explicit RcvData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:define.RcvData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fdefine_2eproto;
};
// -------------------------------------------------------------------

class ResponseRcv final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:define.ResponseRcv) */ {
 public:
  inline ResponseRcv() : ResponseRcv(nullptr) {}
  ~ResponseRcv() override;
  explicit constexpr ResponseRcv(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseRcv(const ResponseRcv& from);
  ResponseRcv(ResponseRcv&& from) noexcept
    : ResponseRcv() {
    *this = ::std::move(from);
  }

  inline ResponseRcv& operator=(const ResponseRcv& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseRcv& operator=(ResponseRcv&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseRcv& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseRcv* internal_default_instance() {
    return reinterpret_cast<const ResponseRcv*>(
               &_ResponseRcv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ResponseRcv& a, ResponseRcv& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseRcv* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseRcv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseRcv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseRcv>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseRcv& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseRcv& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseRcv* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "define.ResponseRcv";
  }
  protected:
  explicit ResponseRcv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kDataFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .define.RcvData data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::define::RcvData& data() const;
  PROTOBUF_NODISCARD ::define::RcvData* release_data();
  ::define::RcvData* mutable_data();
  void set_allocated_data(::define::RcvData* data);
  private:
  const ::define::RcvData& _internal_data() const;
  ::define::RcvData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::define::RcvData* data);
  ::define::RcvData* unsafe_arena_release_data();

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:define.ResponseRcv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::define::RcvData* data_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fdefine_2eproto;
};
// -------------------------------------------------------------------

class RcvUni final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:define.RcvUni) */ {
 public:
  inline RcvUni() : RcvUni(nullptr) {}
  ~RcvUni() override;
  explicit constexpr RcvUni(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RcvUni(const RcvUni& from);
  RcvUni(RcvUni&& from) noexcept
    : RcvUni() {
    *this = ::std::move(from);
  }

  inline RcvUni& operator=(const RcvUni& from) {
    CopyFrom(from);
    return *this;
  }
  inline RcvUni& operator=(RcvUni&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RcvUni& default_instance() {
    return *internal_default_instance();
  }
  static inline const RcvUni* internal_default_instance() {
    return reinterpret_cast<const RcvUni*>(
               &_RcvUni_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RcvUni& a, RcvUni& b) {
    a.Swap(&b);
  }
  inline void Swap(RcvUni* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RcvUni* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RcvUni* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RcvUni>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RcvUni& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RcvUni& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RcvUni* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "define.RcvUni";
  }
  protected:
  explicit RcvUni(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnidFieldNumber = 1,
  };
  // string unid = 1;
  void clear_unid();
  const std::string& unid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unid();
  PROTOBUF_NODISCARD std::string* release_unid();
  void set_allocated_unid(std::string* unid);
  private:
  const std::string& _internal_unid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unid(const std::string& value);
  std::string* _internal_mutable_unid();
  public:

  // @@protoc_insertion_point(class_scope:define.RcvUni)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fdefine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Obj

// string model = 1;
inline void Obj::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& Obj::model() const {
  // @@protoc_insertion_point(field_get:define.Obj.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Obj::set_model(ArgT0&& arg0, ArgT... args) {
 
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.Obj.model)
}
inline std::string* Obj::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:define.Obj.model)
  return _s;
}
inline const std::string& Obj::_internal_model() const {
  return model_.Get();
}
inline void Obj::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Obj::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Obj::release_model() {
  // @@protoc_insertion_point(field_release:define.Obj.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Obj::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.Obj.model)
}

// string id = 2;
inline void Obj::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Obj::id() const {
  // @@protoc_insertion_point(field_get:define.Obj.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Obj::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.Obj.id)
}
inline std::string* Obj::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:define.Obj.id)
  return _s;
}
inline const std::string& Obj::_internal_id() const {
  return id_.Get();
}
inline void Obj::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Obj::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Obj::release_id() {
  // @@protoc_insertion_point(field_release:define.Obj.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Obj::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.Obj.id)
}

// -------------------------------------------------------------------

// HardwareOther

// string machine = 1;
inline void HardwareOther::clear_machine() {
  machine_.ClearToEmpty();
}
inline const std::string& HardwareOther::machine() const {
  // @@protoc_insertion_point(field_get:define.HardwareOther.machine)
  return _internal_machine();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HardwareOther::set_machine(ArgT0&& arg0, ArgT... args) {
 
 machine_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.HardwareOther.machine)
}
inline std::string* HardwareOther::mutable_machine() {
  std::string* _s = _internal_mutable_machine();
  // @@protoc_insertion_point(field_mutable:define.HardwareOther.machine)
  return _s;
}
inline const std::string& HardwareOther::_internal_machine() const {
  return machine_.Get();
}
inline void HardwareOther::_internal_set_machine(const std::string& value) {
  
  machine_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HardwareOther::_internal_mutable_machine() {
  
  return machine_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HardwareOther::release_machine() {
  // @@protoc_insertion_point(field_release:define.HardwareOther.machine)
  return machine_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HardwareOther::set_allocated_machine(std::string* machine) {
  if (machine != nullptr) {
    
  } else {
    
  }
  machine_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machine,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    machine_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.HardwareOther.machine)
}

// string apt = 2;
inline void HardwareOther::clear_apt() {
  apt_.ClearToEmpty();
}
inline const std::string& HardwareOther::apt() const {
  // @@protoc_insertion_point(field_get:define.HardwareOther.apt)
  return _internal_apt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HardwareOther::set_apt(ArgT0&& arg0, ArgT... args) {
 
 apt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.HardwareOther.apt)
}
inline std::string* HardwareOther::mutable_apt() {
  std::string* _s = _internal_mutable_apt();
  // @@protoc_insertion_point(field_mutable:define.HardwareOther.apt)
  return _s;
}
inline const std::string& HardwareOther::_internal_apt() const {
  return apt_.Get();
}
inline void HardwareOther::_internal_set_apt(const std::string& value) {
  
  apt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HardwareOther::_internal_mutable_apt() {
  
  return apt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HardwareOther::release_apt() {
  // @@protoc_insertion_point(field_release:define.HardwareOther.apt)
  return apt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HardwareOther::set_allocated_apt(std::string* apt) {
  if (apt != nullptr) {
    
  } else {
    
  }
  apt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), apt,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (apt_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    apt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.HardwareOther.apt)
}

// string active = 3;
inline void HardwareOther::clear_active() {
  active_.ClearToEmpty();
}
inline const std::string& HardwareOther::active() const {
  // @@protoc_insertion_point(field_get:define.HardwareOther.active)
  return _internal_active();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HardwareOther::set_active(ArgT0&& arg0, ArgT... args) {
 
 active_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.HardwareOther.active)
}
inline std::string* HardwareOther::mutable_active() {
  std::string* _s = _internal_mutable_active();
  // @@protoc_insertion_point(field_mutable:define.HardwareOther.active)
  return _s;
}
inline const std::string& HardwareOther::_internal_active() const {
  return active_.Get();
}
inline void HardwareOther::_internal_set_active(const std::string& value) {
  
  active_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HardwareOther::_internal_mutable_active() {
  
  return active_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HardwareOther::release_active() {
  // @@protoc_insertion_point(field_release:define.HardwareOther.active)
  return active_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HardwareOther::set_allocated_active(std::string* active) {
  if (active != nullptr) {
    
  } else {
    
  }
  active_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (active_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    active_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.HardwareOther.active)
}

// -------------------------------------------------------------------

// HardwareInfo

// int32 tid = 1;
inline void HardwareInfo::clear_tid() {
  tid_ = 0;
}
inline int32_t HardwareInfo::_internal_tid() const {
  return tid_;
}
inline int32_t HardwareInfo::tid() const {
  // @@protoc_insertion_point(field_get:define.HardwareInfo.tid)
  return _internal_tid();
}
inline void HardwareInfo::_internal_set_tid(int32_t value) {
  
  tid_ = value;
}
inline void HardwareInfo::set_tid(int32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:define.HardwareInfo.tid)
}

// string os_type = 2;
inline void HardwareInfo::clear_os_type() {
  os_type_.ClearToEmpty();
}
inline const std::string& HardwareInfo::os_type() const {
  // @@protoc_insertion_point(field_get:define.HardwareInfo.os_type)
  return _internal_os_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HardwareInfo::set_os_type(ArgT0&& arg0, ArgT... args) {
 
 os_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.HardwareInfo.os_type)
}
inline std::string* HardwareInfo::mutable_os_type() {
  std::string* _s = _internal_mutable_os_type();
  // @@protoc_insertion_point(field_mutable:define.HardwareInfo.os_type)
  return _s;
}
inline const std::string& HardwareInfo::_internal_os_type() const {
  return os_type_.Get();
}
inline void HardwareInfo::_internal_set_os_type(const std::string& value) {
  
  os_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HardwareInfo::_internal_mutable_os_type() {
  
  return os_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HardwareInfo::release_os_type() {
  // @@protoc_insertion_point(field_release:define.HardwareInfo.os_type)
  return os_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HardwareInfo::set_allocated_os_type(std::string* os_type) {
  if (os_type != nullptr) {
    
  } else {
    
  }
  os_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), os_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (os_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    os_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.HardwareInfo.os_type)
}

// string version = 3;
inline void HardwareInfo::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& HardwareInfo::version() const {
  // @@protoc_insertion_point(field_get:define.HardwareInfo.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HardwareInfo::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.HardwareInfo.version)
}
inline std::string* HardwareInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:define.HardwareInfo.version)
  return _s;
}
inline const std::string& HardwareInfo::_internal_version() const {
  return version_.Get();
}
inline void HardwareInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HardwareInfo::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HardwareInfo::release_version() {
  // @@protoc_insertion_point(field_release:define.HardwareInfo.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HardwareInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.HardwareInfo.version)
}

// string uni_id = 4;
inline void HardwareInfo::clear_uni_id() {
  uni_id_.ClearToEmpty();
}
inline const std::string& HardwareInfo::uni_id() const {
  // @@protoc_insertion_point(field_get:define.HardwareInfo.uni_id)
  return _internal_uni_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HardwareInfo::set_uni_id(ArgT0&& arg0, ArgT... args) {
 
 uni_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.HardwareInfo.uni_id)
}
inline std::string* HardwareInfo::mutable_uni_id() {
  std::string* _s = _internal_mutable_uni_id();
  // @@protoc_insertion_point(field_mutable:define.HardwareInfo.uni_id)
  return _s;
}
inline const std::string& HardwareInfo::_internal_uni_id() const {
  return uni_id_.Get();
}
inline void HardwareInfo::_internal_set_uni_id(const std::string& value) {
  
  uni_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HardwareInfo::_internal_mutable_uni_id() {
  
  return uni_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HardwareInfo::release_uni_id() {
  // @@protoc_insertion_point(field_release:define.HardwareInfo.uni_id)
  return uni_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HardwareInfo::set_allocated_uni_id(std::string* uni_id) {
  if (uni_id != nullptr) {
    
  } else {
    
  }
  uni_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uni_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uni_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    uni_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.HardwareInfo.uni_id)
}

// repeated .define.Obj cpu = 5;
inline int HardwareInfo::_internal_cpu_size() const {
  return cpu_.size();
}
inline int HardwareInfo::cpu_size() const {
  return _internal_cpu_size();
}
inline void HardwareInfo::clear_cpu() {
  cpu_.Clear();
}
inline ::define::Obj* HardwareInfo::mutable_cpu(int index) {
  // @@protoc_insertion_point(field_mutable:define.HardwareInfo.cpu)
  return cpu_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >*
HardwareInfo::mutable_cpu() {
  // @@protoc_insertion_point(field_mutable_list:define.HardwareInfo.cpu)
  return &cpu_;
}
inline const ::define::Obj& HardwareInfo::_internal_cpu(int index) const {
  return cpu_.Get(index);
}
inline const ::define::Obj& HardwareInfo::cpu(int index) const {
  // @@protoc_insertion_point(field_get:define.HardwareInfo.cpu)
  return _internal_cpu(index);
}
inline ::define::Obj* HardwareInfo::_internal_add_cpu() {
  return cpu_.Add();
}
inline ::define::Obj* HardwareInfo::add_cpu() {
  ::define::Obj* _add = _internal_add_cpu();
  // @@protoc_insertion_point(field_add:define.HardwareInfo.cpu)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >&
HardwareInfo::cpu() const {
  // @@protoc_insertion_point(field_list:define.HardwareInfo.cpu)
  return cpu_;
}

// repeated .define.Obj board = 6;
inline int HardwareInfo::_internal_board_size() const {
  return board_.size();
}
inline int HardwareInfo::board_size() const {
  return _internal_board_size();
}
inline void HardwareInfo::clear_board() {
  board_.Clear();
}
inline ::define::Obj* HardwareInfo::mutable_board(int index) {
  // @@protoc_insertion_point(field_mutable:define.HardwareInfo.board)
  return board_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >*
HardwareInfo::mutable_board() {
  // @@protoc_insertion_point(field_mutable_list:define.HardwareInfo.board)
  return &board_;
}
inline const ::define::Obj& HardwareInfo::_internal_board(int index) const {
  return board_.Get(index);
}
inline const ::define::Obj& HardwareInfo::board(int index) const {
  // @@protoc_insertion_point(field_get:define.HardwareInfo.board)
  return _internal_board(index);
}
inline ::define::Obj* HardwareInfo::_internal_add_board() {
  return board_.Add();
}
inline ::define::Obj* HardwareInfo::add_board() {
  ::define::Obj* _add = _internal_add_board();
  // @@protoc_insertion_point(field_add:define.HardwareInfo.board)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >&
HardwareInfo::board() const {
  // @@protoc_insertion_point(field_list:define.HardwareInfo.board)
  return board_;
}

// repeated .define.Obj gpu = 7;
inline int HardwareInfo::_internal_gpu_size() const {
  return gpu_.size();
}
inline int HardwareInfo::gpu_size() const {
  return _internal_gpu_size();
}
inline void HardwareInfo::clear_gpu() {
  gpu_.Clear();
}
inline ::define::Obj* HardwareInfo::mutable_gpu(int index) {
  // @@protoc_insertion_point(field_mutable:define.HardwareInfo.gpu)
  return gpu_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >*
HardwareInfo::mutable_gpu() {
  // @@protoc_insertion_point(field_mutable_list:define.HardwareInfo.gpu)
  return &gpu_;
}
inline const ::define::Obj& HardwareInfo::_internal_gpu(int index) const {
  return gpu_.Get(index);
}
inline const ::define::Obj& HardwareInfo::gpu(int index) const {
  // @@protoc_insertion_point(field_get:define.HardwareInfo.gpu)
  return _internal_gpu(index);
}
inline ::define::Obj* HardwareInfo::_internal_add_gpu() {
  return gpu_.Add();
}
inline ::define::Obj* HardwareInfo::add_gpu() {
  ::define::Obj* _add = _internal_add_gpu();
  // @@protoc_insertion_point(field_add:define.HardwareInfo.gpu)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >&
HardwareInfo::gpu() const {
  // @@protoc_insertion_point(field_list:define.HardwareInfo.gpu)
  return gpu_;
}

// repeated .define.Obj memory = 8;
inline int HardwareInfo::_internal_memory_size() const {
  return memory_.size();
}
inline int HardwareInfo::memory_size() const {
  return _internal_memory_size();
}
inline void HardwareInfo::clear_memory() {
  memory_.Clear();
}
inline ::define::Obj* HardwareInfo::mutable_memory(int index) {
  // @@protoc_insertion_point(field_mutable:define.HardwareInfo.memory)
  return memory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >*
HardwareInfo::mutable_memory() {
  // @@protoc_insertion_point(field_mutable_list:define.HardwareInfo.memory)
  return &memory_;
}
inline const ::define::Obj& HardwareInfo::_internal_memory(int index) const {
  return memory_.Get(index);
}
inline const ::define::Obj& HardwareInfo::memory(int index) const {
  // @@protoc_insertion_point(field_get:define.HardwareInfo.memory)
  return _internal_memory(index);
}
inline ::define::Obj* HardwareInfo::_internal_add_memory() {
  return memory_.Add();
}
inline ::define::Obj* HardwareInfo::add_memory() {
  ::define::Obj* _add = _internal_add_memory();
  // @@protoc_insertion_point(field_add:define.HardwareInfo.memory)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >&
HardwareInfo::memory() const {
  // @@protoc_insertion_point(field_list:define.HardwareInfo.memory)
  return memory_;
}

// repeated .define.Obj disk = 9;
inline int HardwareInfo::_internal_disk_size() const {
  return disk_.size();
}
inline int HardwareInfo::disk_size() const {
  return _internal_disk_size();
}
inline void HardwareInfo::clear_disk() {
  disk_.Clear();
}
inline ::define::Obj* HardwareInfo::mutable_disk(int index) {
  // @@protoc_insertion_point(field_mutable:define.HardwareInfo.disk)
  return disk_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >*
HardwareInfo::mutable_disk() {
  // @@protoc_insertion_point(field_mutable_list:define.HardwareInfo.disk)
  return &disk_;
}
inline const ::define::Obj& HardwareInfo::_internal_disk(int index) const {
  return disk_.Get(index);
}
inline const ::define::Obj& HardwareInfo::disk(int index) const {
  // @@protoc_insertion_point(field_get:define.HardwareInfo.disk)
  return _internal_disk(index);
}
inline ::define::Obj* HardwareInfo::_internal_add_disk() {
  return disk_.Add();
}
inline ::define::Obj* HardwareInfo::add_disk() {
  ::define::Obj* _add = _internal_add_disk();
  // @@protoc_insertion_point(field_add:define.HardwareInfo.disk)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >&
HardwareInfo::disk() const {
  // @@protoc_insertion_point(field_list:define.HardwareInfo.disk)
  return disk_;
}

// repeated .define.Obj netcard = 10;
inline int HardwareInfo::_internal_netcard_size() const {
  return netcard_.size();
}
inline int HardwareInfo::netcard_size() const {
  return _internal_netcard_size();
}
inline void HardwareInfo::clear_netcard() {
  netcard_.Clear();
}
inline ::define::Obj* HardwareInfo::mutable_netcard(int index) {
  // @@protoc_insertion_point(field_mutable:define.HardwareInfo.netcard)
  return netcard_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >*
HardwareInfo::mutable_netcard() {
  // @@protoc_insertion_point(field_mutable_list:define.HardwareInfo.netcard)
  return &netcard_;
}
inline const ::define::Obj& HardwareInfo::_internal_netcard(int index) const {
  return netcard_.Get(index);
}
inline const ::define::Obj& HardwareInfo::netcard(int index) const {
  // @@protoc_insertion_point(field_get:define.HardwareInfo.netcard)
  return _internal_netcard(index);
}
inline ::define::Obj* HardwareInfo::_internal_add_netcard() {
  return netcard_.Add();
}
inline ::define::Obj* HardwareInfo::add_netcard() {
  ::define::Obj* _add = _internal_add_netcard();
  // @@protoc_insertion_point(field_add:define.HardwareInfo.netcard)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::Obj >&
HardwareInfo::netcard() const {
  // @@protoc_insertion_point(field_list:define.HardwareInfo.netcard)
  return netcard_;
}

// .define.HardwareOther other = 11;
inline bool HardwareInfo::_internal_has_other() const {
  return this != internal_default_instance() && other_ != nullptr;
}
inline bool HardwareInfo::has_other() const {
  return _internal_has_other();
}
inline void HardwareInfo::clear_other() {
  if (GetArenaForAllocation() == nullptr && other_ != nullptr) {
    delete other_;
  }
  other_ = nullptr;
}
inline const ::define::HardwareOther& HardwareInfo::_internal_other() const {
  const ::define::HardwareOther* p = other_;
  return p != nullptr ? *p : reinterpret_cast<const ::define::HardwareOther&>(
      ::define::_HardwareOther_default_instance_);
}
inline const ::define::HardwareOther& HardwareInfo::other() const {
  // @@protoc_insertion_point(field_get:define.HardwareInfo.other)
  return _internal_other();
}
inline void HardwareInfo::unsafe_arena_set_allocated_other(
    ::define::HardwareOther* other) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(other_);
  }
  other_ = other;
  if (other) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:define.HardwareInfo.other)
}
inline ::define::HardwareOther* HardwareInfo::release_other() {
  
  ::define::HardwareOther* temp = other_;
  other_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::define::HardwareOther* HardwareInfo::unsafe_arena_release_other() {
  // @@protoc_insertion_point(field_release:define.HardwareInfo.other)
  
  ::define::HardwareOther* temp = other_;
  other_ = nullptr;
  return temp;
}
inline ::define::HardwareOther* HardwareInfo::_internal_mutable_other() {
  
  if (other_ == nullptr) {
    auto* p = CreateMaybeMessage<::define::HardwareOther>(GetArenaForAllocation());
    other_ = p;
  }
  return other_;
}
inline ::define::HardwareOther* HardwareInfo::mutable_other() {
  ::define::HardwareOther* _msg = _internal_mutable_other();
  // @@protoc_insertion_point(field_mutable:define.HardwareInfo.other)
  return _msg;
}
inline void HardwareInfo::set_allocated_other(::define::HardwareOther* other) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete other_;
  }
  if (other) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::define::HardwareOther>::GetOwningArena(other);
    if (message_arena != submessage_arena) {
      other = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other, submessage_arena);
    }
    
  } else {
    
  }
  other_ = other;
  // @@protoc_insertion_point(field_set_allocated:define.HardwareInfo.other)
}

// -------------------------------------------------------------------

// PostDomain

// string url_path = 1;
inline void PostDomain::clear_url_path() {
  url_path_.ClearToEmpty();
}
inline const std::string& PostDomain::url_path() const {
  // @@protoc_insertion_point(field_get:define.PostDomain.url_path)
  return _internal_url_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostDomain::set_url_path(ArgT0&& arg0, ArgT... args) {
 
 url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.PostDomain.url_path)
}
inline std::string* PostDomain::mutable_url_path() {
  std::string* _s = _internal_mutable_url_path();
  // @@protoc_insertion_point(field_mutable:define.PostDomain.url_path)
  return _s;
}
inline const std::string& PostDomain::_internal_url_path() const {
  return url_path_.Get();
}
inline void PostDomain::_internal_set_url_path(const std::string& value) {
  
  url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostDomain::_internal_mutable_url_path() {
  
  return url_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostDomain::release_url_path() {
  // @@protoc_insertion_point(field_release:define.PostDomain.url_path)
  return url_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostDomain::set_allocated_url_path(std::string* url_path) {
  if (url_path != nullptr) {
    
  } else {
    
  }
  url_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.PostDomain.url_path)
}

// uint64 time = 2;
inline void PostDomain::clear_time() {
  time_ = uint64_t{0u};
}
inline uint64_t PostDomain::_internal_time() const {
  return time_;
}
inline uint64_t PostDomain::time() const {
  // @@protoc_insertion_point(field_get:define.PostDomain.time)
  return _internal_time();
}
inline void PostDomain::_internal_set_time(uint64_t value) {
  
  time_ = value;
}
inline void PostDomain::set_time(uint64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:define.PostDomain.time)
}

// -------------------------------------------------------------------

// PostInterface

// repeated .define.PostDomain domains = 1;
inline int PostInterface::_internal_domains_size() const {
  return domains_.size();
}
inline int PostInterface::domains_size() const {
  return _internal_domains_size();
}
inline void PostInterface::clear_domains() {
  domains_.Clear();
}
inline ::define::PostDomain* PostInterface::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:define.PostInterface.domains)
  return domains_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::PostDomain >*
PostInterface::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:define.PostInterface.domains)
  return &domains_;
}
inline const ::define::PostDomain& PostInterface::_internal_domains(int index) const {
  return domains_.Get(index);
}
inline const ::define::PostDomain& PostInterface::domains(int index) const {
  // @@protoc_insertion_point(field_get:define.PostInterface.domains)
  return _internal_domains(index);
}
inline ::define::PostDomain* PostInterface::_internal_add_domains() {
  return domains_.Add();
}
inline ::define::PostDomain* PostInterface::add_domains() {
  ::define::PostDomain* _add = _internal_add_domains();
  // @@protoc_insertion_point(field_add:define.PostInterface.domains)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::define::PostDomain >&
PostInterface::domains() const {
  // @@protoc_insertion_point(field_list:define.PostInterface.domains)
  return domains_;
}

// string aid = 2;
inline void PostInterface::clear_aid() {
  aid_.ClearToEmpty();
}
inline const std::string& PostInterface::aid() const {
  // @@protoc_insertion_point(field_get:define.PostInterface.aid)
  return _internal_aid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostInterface::set_aid(ArgT0&& arg0, ArgT... args) {
 
 aid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.PostInterface.aid)
}
inline std::string* PostInterface::mutable_aid() {
  std::string* _s = _internal_mutable_aid();
  // @@protoc_insertion_point(field_mutable:define.PostInterface.aid)
  return _s;
}
inline const std::string& PostInterface::_internal_aid() const {
  return aid_.Get();
}
inline void PostInterface::_internal_set_aid(const std::string& value) {
  
  aid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostInterface::_internal_mutable_aid() {
  
  return aid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostInterface::release_aid() {
  // @@protoc_insertion_point(field_release:define.PostInterface.aid)
  return aid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostInterface::set_allocated_aid(std::string* aid) {
  if (aid != nullptr) {
    
  } else {
    
  }
  aid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (aid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    aid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.PostInterface.aid)
}

// string base = 3;
inline void PostInterface::clear_base() {
  base_.ClearToEmpty();
}
inline const std::string& PostInterface::base() const {
  // @@protoc_insertion_point(field_get:define.PostInterface.base)
  return _internal_base();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostInterface::set_base(ArgT0&& arg0, ArgT... args) {
 
 base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.PostInterface.base)
}
inline std::string* PostInterface::mutable_base() {
  std::string* _s = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:define.PostInterface.base)
  return _s;
}
inline const std::string& PostInterface::_internal_base() const {
  return base_.Get();
}
inline void PostInterface::_internal_set_base(const std::string& value) {
  
  base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostInterface::_internal_mutable_base() {
  
  return base_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostInterface::release_base() {
  // @@protoc_insertion_point(field_release:define.PostInterface.base)
  return base_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostInterface::set_allocated_base(std::string* base) {
  if (base != nullptr) {
    
  } else {
    
  }
  base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (base_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    base_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.PostInterface.base)
}

// string info = 4;
inline void PostInterface::clear_info() {
  info_.ClearToEmpty();
}
inline const std::string& PostInterface::info() const {
  // @@protoc_insertion_point(field_get:define.PostInterface.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostInterface::set_info(ArgT0&& arg0, ArgT... args) {
 
 info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.PostInterface.info)
}
inline std::string* PostInterface::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:define.PostInterface.info)
  return _s;
}
inline const std::string& PostInterface::_internal_info() const {
  return info_.Get();
}
inline void PostInterface::_internal_set_info(const std::string& value) {
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostInterface::_internal_mutable_info() {
  
  return info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostInterface::release_info() {
  // @@protoc_insertion_point(field_release:define.PostInterface.info)
  return info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostInterface::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (info_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.PostInterface.info)
}

// string order = 5;
inline void PostInterface::clear_order() {
  order_.ClearToEmpty();
}
inline const std::string& PostInterface::order() const {
  // @@protoc_insertion_point(field_get:define.PostInterface.order)
  return _internal_order();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostInterface::set_order(ArgT0&& arg0, ArgT... args) {
 
 order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.PostInterface.order)
}
inline std::string* PostInterface::mutable_order() {
  std::string* _s = _internal_mutable_order();
  // @@protoc_insertion_point(field_mutable:define.PostInterface.order)
  return _s;
}
inline const std::string& PostInterface::_internal_order() const {
  return order_.Get();
}
inline void PostInterface::_internal_set_order(const std::string& value) {
  
  order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostInterface::_internal_mutable_order() {
  
  return order_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostInterface::release_order() {
  // @@protoc_insertion_point(field_release:define.PostInterface.order)
  return order_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostInterface::set_allocated_order(std::string* order) {
  if (order != nullptr) {
    
  } else {
    
  }
  order_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.PostInterface.order)
}

// string apt = 6;
inline void PostInterface::clear_apt() {
  apt_.ClearToEmpty();
}
inline const std::string& PostInterface::apt() const {
  // @@protoc_insertion_point(field_get:define.PostInterface.apt)
  return _internal_apt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostInterface::set_apt(ArgT0&& arg0, ArgT... args) {
 
 apt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.PostInterface.apt)
}
inline std::string* PostInterface::mutable_apt() {
  std::string* _s = _internal_mutable_apt();
  // @@protoc_insertion_point(field_mutable:define.PostInterface.apt)
  return _s;
}
inline const std::string& PostInterface::_internal_apt() const {
  return apt_.Get();
}
inline void PostInterface::_internal_set_apt(const std::string& value) {
  
  apt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostInterface::_internal_mutable_apt() {
  
  return apt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostInterface::release_apt() {
  // @@protoc_insertion_point(field_release:define.PostInterface.apt)
  return apt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostInterface::set_allocated_apt(std::string* apt) {
  if (apt != nullptr) {
    
  } else {
    
  }
  apt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), apt,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (apt_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    apt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.PostInterface.apt)
}

// string use = 7;
inline void PostInterface::clear_use() {
  use_.ClearToEmpty();
}
inline const std::string& PostInterface::use() const {
  // @@protoc_insertion_point(field_get:define.PostInterface.use)
  return _internal_use();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostInterface::set_use(ArgT0&& arg0, ArgT... args) {
 
 use_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.PostInterface.use)
}
inline std::string* PostInterface::mutable_use() {
  std::string* _s = _internal_mutable_use();
  // @@protoc_insertion_point(field_mutable:define.PostInterface.use)
  return _s;
}
inline const std::string& PostInterface::_internal_use() const {
  return use_.Get();
}
inline void PostInterface::_internal_set_use(const std::string& value) {
  
  use_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostInterface::_internal_mutable_use() {
  
  return use_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostInterface::release_use() {
  // @@protoc_insertion_point(field_release:define.PostInterface.use)
  return use_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostInterface::set_allocated_use(std::string* use) {
  if (use != nullptr) {
    
  } else {
    
  }
  use_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), use,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (use_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    use_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.PostInterface.use)
}

// string update = 8;
inline void PostInterface::clear_update() {
  update_.ClearToEmpty();
}
inline const std::string& PostInterface::update() const {
  // @@protoc_insertion_point(field_get:define.PostInterface.update)
  return _internal_update();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostInterface::set_update(ArgT0&& arg0, ArgT... args) {
 
 update_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.PostInterface.update)
}
inline std::string* PostInterface::mutable_update() {
  std::string* _s = _internal_mutable_update();
  // @@protoc_insertion_point(field_mutable:define.PostInterface.update)
  return _s;
}
inline const std::string& PostInterface::_internal_update() const {
  return update_.Get();
}
inline void PostInterface::_internal_set_update(const std::string& value) {
  
  update_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostInterface::_internal_mutable_update() {
  
  return update_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostInterface::release_update() {
  // @@protoc_insertion_point(field_release:define.PostInterface.update)
  return update_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostInterface::set_allocated_update(std::string* update) {
  if (update != nullptr) {
    
  } else {
    
  }
  update_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), update,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (update_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    update_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.PostInterface.update)
}

// string update_domain = 9;
inline void PostInterface::clear_update_domain() {
  update_domain_.ClearToEmpty();
}
inline const std::string& PostInterface::update_domain() const {
  // @@protoc_insertion_point(field_get:define.PostInterface.update_domain)
  return _internal_update_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostInterface::set_update_domain(ArgT0&& arg0, ArgT... args) {
 
 update_domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.PostInterface.update_domain)
}
inline std::string* PostInterface::mutable_update_domain() {
  std::string* _s = _internal_mutable_update_domain();
  // @@protoc_insertion_point(field_mutable:define.PostInterface.update_domain)
  return _s;
}
inline const std::string& PostInterface::_internal_update_domain() const {
  return update_domain_.Get();
}
inline void PostInterface::_internal_set_update_domain(const std::string& value) {
  
  update_domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostInterface::_internal_mutable_update_domain() {
  
  return update_domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostInterface::release_update_domain() {
  // @@protoc_insertion_point(field_release:define.PostInterface.update_domain)
  return update_domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostInterface::set_allocated_update_domain(std::string* update_domain) {
  if (update_domain != nullptr) {
    
  } else {
    
  }
  update_domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), update_domain,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (update_domain_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    update_domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.PostInterface.update_domain)
}

// string update_path = 10;
inline void PostInterface::clear_update_path() {
  update_path_.ClearToEmpty();
}
inline const std::string& PostInterface::update_path() const {
  // @@protoc_insertion_point(field_get:define.PostInterface.update_path)
  return _internal_update_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostInterface::set_update_path(ArgT0&& arg0, ArgT... args) {
 
 update_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.PostInterface.update_path)
}
inline std::string* PostInterface::mutable_update_path() {
  std::string* _s = _internal_mutable_update_path();
  // @@protoc_insertion_point(field_mutable:define.PostInterface.update_path)
  return _s;
}
inline const std::string& PostInterface::_internal_update_path() const {
  return update_path_.Get();
}
inline void PostInterface::_internal_set_update_path(const std::string& value) {
  
  update_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostInterface::_internal_mutable_update_path() {
  
  return update_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostInterface::release_update_path() {
  // @@protoc_insertion_point(field_release:define.PostInterface.update_path)
  return update_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostInterface::set_allocated_update_path(std::string* update_path) {
  if (update_path != nullptr) {
    
  } else {
    
  }
  update_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), update_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (update_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    update_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.PostInterface.update_path)
}

// string general = 11;
inline void PostInterface::clear_general() {
  general_.ClearToEmpty();
}
inline const std::string& PostInterface::general() const {
  // @@protoc_insertion_point(field_get:define.PostInterface.general)
  return _internal_general();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostInterface::set_general(ArgT0&& arg0, ArgT... args) {
 
 general_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.PostInterface.general)
}
inline std::string* PostInterface::mutable_general() {
  std::string* _s = _internal_mutable_general();
  // @@protoc_insertion_point(field_mutable:define.PostInterface.general)
  return _s;
}
inline const std::string& PostInterface::_internal_general() const {
  return general_.Get();
}
inline void PostInterface::_internal_set_general(const std::string& value) {
  
  general_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostInterface::_internal_mutable_general() {
  
  return general_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostInterface::release_general() {
  // @@protoc_insertion_point(field_release:define.PostInterface.general)
  return general_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostInterface::set_allocated_general(std::string* general) {
  if (general != nullptr) {
    
  } else {
    
  }
  general_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), general,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (general_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    general_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.PostInterface.general)
}

// string post_type = 12;
inline void PostInterface::clear_post_type() {
  post_type_.ClearToEmpty();
}
inline const std::string& PostInterface::post_type() const {
  // @@protoc_insertion_point(field_get:define.PostInterface.post_type)
  return _internal_post_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostInterface::set_post_type(ArgT0&& arg0, ArgT... args) {
 
 post_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.PostInterface.post_type)
}
inline std::string* PostInterface::mutable_post_type() {
  std::string* _s = _internal_mutable_post_type();
  // @@protoc_insertion_point(field_mutable:define.PostInterface.post_type)
  return _s;
}
inline const std::string& PostInterface::_internal_post_type() const {
  return post_type_.Get();
}
inline void PostInterface::_internal_set_post_type(const std::string& value) {
  
  post_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostInterface::_internal_mutable_post_type() {
  
  return post_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostInterface::release_post_type() {
  // @@protoc_insertion_point(field_release:define.PostInterface.post_type)
  return post_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostInterface::set_allocated_post_type(std::string* post_type) {
  if (post_type != nullptr) {
    
  } else {
    
  }
  post_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (post_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    post_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.PostInterface.post_type)
}

// string uni_id = 13;
inline void PostInterface::clear_uni_id() {
  uni_id_.ClearToEmpty();
}
inline const std::string& PostInterface::uni_id() const {
  // @@protoc_insertion_point(field_get:define.PostInterface.uni_id)
  return _internal_uni_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostInterface::set_uni_id(ArgT0&& arg0, ArgT... args) {
 
 uni_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.PostInterface.uni_id)
}
inline std::string* PostInterface::mutable_uni_id() {
  std::string* _s = _internal_mutable_uni_id();
  // @@protoc_insertion_point(field_mutable:define.PostInterface.uni_id)
  return _s;
}
inline const std::string& PostInterface::_internal_uni_id() const {
  return uni_id_.Get();
}
inline void PostInterface::_internal_set_uni_id(const std::string& value) {
  
  uni_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostInterface::_internal_mutable_uni_id() {
  
  return uni_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostInterface::release_uni_id() {
  // @@protoc_insertion_point(field_release:define.PostInterface.uni_id)
  return uni_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostInterface::set_allocated_uni_id(std::string* uni_id) {
  if (uni_id != nullptr) {
    
  } else {
    
  }
  uni_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uni_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uni_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    uni_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.PostInterface.uni_id)
}

// -------------------------------------------------------------------

// SysCfg

// bool develop = 1;
inline void SysCfg::clear_develop() {
  develop_ = false;
}
inline bool SysCfg::_internal_develop() const {
  return develop_;
}
inline bool SysCfg::develop() const {
  // @@protoc_insertion_point(field_get:define.SysCfg.develop)
  return _internal_develop();
}
inline void SysCfg::_internal_set_develop(bool value) {
  
  develop_ = value;
}
inline void SysCfg::set_develop(bool value) {
  _internal_set_develop(value);
  // @@protoc_insertion_point(field_set:define.SysCfg.develop)
}

// bool user_exp = 2;
inline void SysCfg::clear_user_exp() {
  user_exp_ = false;
}
inline bool SysCfg::_internal_user_exp() const {
  return user_exp_;
}
inline bool SysCfg::user_exp() const {
  // @@protoc_insertion_point(field_get:define.SysCfg.user_exp)
  return _internal_user_exp();
}
inline void SysCfg::_internal_set_user_exp(bool value) {
  
  user_exp_ = value;
}
inline void SysCfg::set_user_exp(bool value) {
  _internal_set_user_exp(value);
  // @@protoc_insertion_point(field_set:define.SysCfg.user_exp)
}

// uint64 apt = 3;
inline void SysCfg::clear_apt() {
  apt_ = uint64_t{0u};
}
inline uint64_t SysCfg::_internal_apt() const {
  return apt_;
}
inline uint64_t SysCfg::apt() const {
  // @@protoc_insertion_point(field_get:define.SysCfg.apt)
  return _internal_apt();
}
inline void SysCfg::_internal_set_apt(uint64_t value) {
  
  apt_ = value;
}
inline void SysCfg::set_apt(uint64_t value) {
  _internal_set_apt(value);
  // @@protoc_insertion_point(field_set:define.SysCfg.apt)
}

// -------------------------------------------------------------------

// RsaKey

// string public = 1;
inline void RsaKey::clear_public_() {
  public__.ClearToEmpty();
}
inline const std::string& RsaKey::public_() const {
  // @@protoc_insertion_point(field_get:define.RsaKey.public)
  return _internal_public_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RsaKey::set_public_(ArgT0&& arg0, ArgT... args) {
 
 public__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.RsaKey.public)
}
inline std::string* RsaKey::mutable_public_() {
  std::string* _s = _internal_mutable_public_();
  // @@protoc_insertion_point(field_mutable:define.RsaKey.public)
  return _s;
}
inline const std::string& RsaKey::_internal_public_() const {
  return public__.Get();
}
inline void RsaKey::_internal_set_public_(const std::string& value) {
  
  public__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RsaKey::_internal_mutable_public_() {
  
  return public__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RsaKey::release_public_() {
  // @@protoc_insertion_point(field_release:define.RsaKey.public)
  return public__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RsaKey::set_allocated_public_(std::string* public_) {
  if (public_ != nullptr) {
    
  } else {
    
  }
  public__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public__.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    public__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.RsaKey.public)
}

// string private = 2;
inline void RsaKey::clear_private_() {
  private__.ClearToEmpty();
}
inline const std::string& RsaKey::private_() const {
  // @@protoc_insertion_point(field_get:define.RsaKey.private)
  return _internal_private_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RsaKey::set_private_(ArgT0&& arg0, ArgT... args) {
 
 private__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.RsaKey.private)
}
inline std::string* RsaKey::mutable_private_() {
  std::string* _s = _internal_mutable_private_();
  // @@protoc_insertion_point(field_mutable:define.RsaKey.private)
  return _s;
}
inline const std::string& RsaKey::_internal_private_() const {
  return private__.Get();
}
inline void RsaKey::_internal_set_private_(const std::string& value) {
  
  private__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RsaKey::_internal_mutable_private_() {
  
  return private__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RsaKey::release_private_() {
  // @@protoc_insertion_point(field_release:define.RsaKey.private)
  return private__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RsaKey::set_allocated_private_(std::string* private_) {
  if (private_ != nullptr) {
    
  } else {
    
  }
  private__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private__.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    private__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.RsaKey.private)
}

// -------------------------------------------------------------------

// PostSimpleData

// int32 rt = 1;
inline void PostSimpleData::clear_rt() {
  rt_ = 0;
}
inline int32_t PostSimpleData::_internal_rt() const {
  return rt_;
}
inline int32_t PostSimpleData::rt() const {
  // @@protoc_insertion_point(field_get:define.PostSimpleData.rt)
  return _internal_rt();
}
inline void PostSimpleData::_internal_set_rt(int32_t value) {
  
  rt_ = value;
}
inline void PostSimpleData::set_rt(int32_t value) {
  _internal_set_rt(value);
  // @@protoc_insertion_point(field_set:define.PostSimpleData.rt)
}

// string zone = 2;
inline void PostSimpleData::clear_zone() {
  zone_.ClearToEmpty();
}
inline const std::string& PostSimpleData::zone() const {
  // @@protoc_insertion_point(field_get:define.PostSimpleData.zone)
  return _internal_zone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostSimpleData::set_zone(ArgT0&& arg0, ArgT... args) {
 
 zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.PostSimpleData.zone)
}
inline std::string* PostSimpleData::mutable_zone() {
  std::string* _s = _internal_mutable_zone();
  // @@protoc_insertion_point(field_mutable:define.PostSimpleData.zone)
  return _s;
}
inline const std::string& PostSimpleData::_internal_zone() const {
  return zone_.Get();
}
inline void PostSimpleData::_internal_set_zone(const std::string& value) {
  
  zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostSimpleData::_internal_mutable_zone() {
  
  return zone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostSimpleData::release_zone() {
  // @@protoc_insertion_point(field_release:define.PostSimpleData.zone)
  return zone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostSimpleData::set_allocated_zone(std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zone,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (zone_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    zone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.PostSimpleData.zone)
}

// string unid = 3;
inline void PostSimpleData::clear_unid() {
  unid_.ClearToEmpty();
}
inline const std::string& PostSimpleData::unid() const {
  // @@protoc_insertion_point(field_get:define.PostSimpleData.unid)
  return _internal_unid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostSimpleData::set_unid(ArgT0&& arg0, ArgT... args) {
 
 unid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.PostSimpleData.unid)
}
inline std::string* PostSimpleData::mutable_unid() {
  std::string* _s = _internal_mutable_unid();
  // @@protoc_insertion_point(field_mutable:define.PostSimpleData.unid)
  return _s;
}
inline const std::string& PostSimpleData::_internal_unid() const {
  return unid_.Get();
}
inline void PostSimpleData::_internal_set_unid(const std::string& value) {
  
  unid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostSimpleData::_internal_mutable_unid() {
  
  return unid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostSimpleData::release_unid() {
  // @@protoc_insertion_point(field_release:define.PostSimpleData.unid)
  return unid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostSimpleData::set_allocated_unid(std::string* unid) {
  if (unid != nullptr) {
    
  } else {
    
  }
  unid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.PostSimpleData.unid)
}

// repeated string data = 4;
inline int PostSimpleData::_internal_data_size() const {
  return data_.size();
}
inline int PostSimpleData::data_size() const {
  return _internal_data_size();
}
inline void PostSimpleData::clear_data() {
  data_.Clear();
}
inline std::string* PostSimpleData::add_data() {
  std::string* _s = _internal_add_data();
  // @@protoc_insertion_point(field_add_mutable:define.PostSimpleData.data)
  return _s;
}
inline const std::string& PostSimpleData::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& PostSimpleData::data(int index) const {
  // @@protoc_insertion_point(field_get:define.PostSimpleData.data)
  return _internal_data(index);
}
inline std::string* PostSimpleData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:define.PostSimpleData.data)
  return data_.Mutable(index);
}
inline void PostSimpleData::set_data(int index, const std::string& value) {
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:define.PostSimpleData.data)
}
inline void PostSimpleData::set_data(int index, std::string&& value) {
  data_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:define.PostSimpleData.data)
}
inline void PostSimpleData::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:define.PostSimpleData.data)
}
inline void PostSimpleData::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:define.PostSimpleData.data)
}
inline std::string* PostSimpleData::_internal_add_data() {
  return data_.Add();
}
inline void PostSimpleData::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:define.PostSimpleData.data)
}
inline void PostSimpleData::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:define.PostSimpleData.data)
}
inline void PostSimpleData::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:define.PostSimpleData.data)
}
inline void PostSimpleData::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:define.PostSimpleData.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PostSimpleData::data() const {
  // @@protoc_insertion_point(field_list:define.PostSimpleData.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PostSimpleData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:define.PostSimpleData.data)
  return &data_;
}

// -------------------------------------------------------------------

// RcvData

// string key = 1;
inline void RcvData::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& RcvData::key() const {
  // @@protoc_insertion_point(field_get:define.RcvData.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RcvData::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.RcvData.key)
}
inline std::string* RcvData::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:define.RcvData.key)
  return _s;
}
inline const std::string& RcvData::_internal_key() const {
  return key_.Get();
}
inline void RcvData::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RcvData::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RcvData::release_key() {
  // @@protoc_insertion_point(field_release:define.RcvData.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RcvData::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.RcvData.key)
}

// string data = 2;
inline void RcvData::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& RcvData::data() const {
  // @@protoc_insertion_point(field_get:define.RcvData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RcvData::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.RcvData.data)
}
inline std::string* RcvData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:define.RcvData.data)
  return _s;
}
inline const std::string& RcvData::_internal_data() const {
  return data_.Get();
}
inline void RcvData::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RcvData::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RcvData::release_data() {
  // @@protoc_insertion_point(field_release:define.RcvData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RcvData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.RcvData.data)
}

// -------------------------------------------------------------------

// ResponseRcv

// int32 code = 1;
inline void ResponseRcv::clear_code() {
  code_ = 0;
}
inline int32_t ResponseRcv::_internal_code() const {
  return code_;
}
inline int32_t ResponseRcv::code() const {
  // @@protoc_insertion_point(field_get:define.ResponseRcv.code)
  return _internal_code();
}
inline void ResponseRcv::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void ResponseRcv::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:define.ResponseRcv.code)
}

// string msg = 2;
inline void ResponseRcv::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& ResponseRcv::msg() const {
  // @@protoc_insertion_point(field_get:define.ResponseRcv.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseRcv::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.ResponseRcv.msg)
}
inline std::string* ResponseRcv::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:define.ResponseRcv.msg)
  return _s;
}
inline const std::string& ResponseRcv::_internal_msg() const {
  return msg_.Get();
}
inline void ResponseRcv::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseRcv::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseRcv::release_msg() {
  // @@protoc_insertion_point(field_release:define.ResponseRcv.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseRcv::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.ResponseRcv.msg)
}

// .define.RcvData data = 3;
inline bool ResponseRcv::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ResponseRcv::has_data() const {
  return _internal_has_data();
}
inline void ResponseRcv::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::define::RcvData& ResponseRcv::_internal_data() const {
  const ::define::RcvData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::define::RcvData&>(
      ::define::_RcvData_default_instance_);
}
inline const ::define::RcvData& ResponseRcv::data() const {
  // @@protoc_insertion_point(field_get:define.ResponseRcv.data)
  return _internal_data();
}
inline void ResponseRcv::unsafe_arena_set_allocated_data(
    ::define::RcvData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:define.ResponseRcv.data)
}
inline ::define::RcvData* ResponseRcv::release_data() {
  
  ::define::RcvData* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::define::RcvData* ResponseRcv::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:define.ResponseRcv.data)
  
  ::define::RcvData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::define::RcvData* ResponseRcv::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::define::RcvData>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::define::RcvData* ResponseRcv::mutable_data() {
  ::define::RcvData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:define.ResponseRcv.data)
  return _msg;
}
inline void ResponseRcv::set_allocated_data(::define::RcvData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::define::RcvData>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:define.ResponseRcv.data)
}

// -------------------------------------------------------------------

// RcvUni

// string unid = 1;
inline void RcvUni::clear_unid() {
  unid_.ClearToEmpty();
}
inline const std::string& RcvUni::unid() const {
  // @@protoc_insertion_point(field_get:define.RcvUni.unid)
  return _internal_unid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RcvUni::set_unid(ArgT0&& arg0, ArgT... args) {
 
 unid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:define.RcvUni.unid)
}
inline std::string* RcvUni::mutable_unid() {
  std::string* _s = _internal_mutable_unid();
  // @@protoc_insertion_point(field_mutable:define.RcvUni.unid)
  return _s;
}
inline const std::string& RcvUni::_internal_unid() const {
  return unid_.Get();
}
inline void RcvUni::_internal_set_unid(const std::string& value) {
  
  unid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RcvUni::_internal_mutable_unid() {
  
  return unid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RcvUni::release_unid() {
  // @@protoc_insertion_point(field_release:define.RcvUni.unid)
  return unid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RcvUni::set_allocated_unid(std::string* unid) {
  if (unid != nullptr) {
    
  } else {
    
  }
  unid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:define.RcvUni.unid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace define

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_src_2fdefine_2eproto
